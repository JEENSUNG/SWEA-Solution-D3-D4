package com.core.hello;
import java.util.*;
class Daison{
    int x;
    int y;
    int d;
    int sum;
    Daison(int x, int y, int d, int sum){
        this.x = x;
        this.y = y;
        this.d = d;
        this.sum = sum;
    }
}
class Main{
    static int n, m;
    static int[][] arr;
    static boolean isOk = false;
    static boolean[][] visit;
    static int answer = 1;
    static int[][] dir = {{-1,0},{0,1},{1,0},{0,-1}};
    static Queue<Daison> queue = new LinkedList<>();
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n][m];
        visit = new boolean[n][m];
        int x = scan.nextInt();
        int y = scan.nextInt();
        int d = scan.nextInt();
        queue.offer(new Daison(x, y, d, 1));
        visit[x][y] = true;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                arr[i][j] = scan.nextInt();
        bfs();
        System.out.println(answer);
    }
    static void bfs(){
        while(!queue.isEmpty()){
            Daison now = queue.poll();
            isOk = false;
            for(int i = 0; i < 4; i++){
                int k = ((now.d + 3 - i) + 4) % 4;
                int nx = now.x + dir[k][0];
                int ny = now.y + dir[k][1];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                    continue;
                if(visit[nx][ny]){
                    continue;
                }
                if(arr[nx][ny] == 1) {
                    continue;
                }
                if(arr[nx][ny] == 0 && !visit[nx][ny]){
                    queue.offer(new Daison(nx,ny,k,now.sum + 1));
                    visit[nx][ny] = true;
                    isOk = true;
                    answer++;
                    break;
                }
            }
            if(!isOk){
                int p = 0;
                if(now.d == 0)
                    p = 2;
                else if(now.d == 1)
                    p = 3;
                else if(now.d == 3)
                    p = 1;
                int nx = now.x + dir[p][0];
                int ny = now.y + dir[p][1];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                    continue;
                if(arr[nx][ny] == 0)
                    queue.offer(new Daison(nx, ny, now.d, now.sum));
            }
        }
    }
}
