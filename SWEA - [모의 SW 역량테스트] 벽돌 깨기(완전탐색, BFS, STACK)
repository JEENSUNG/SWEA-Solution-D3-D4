import java.util.*;
class Point{
	int x;
	int y;
	int cnt;
	Point(int x, int y, int cnt){
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}
class Solution{
	static int n, w,h;
	static int[][] arr, ans;
	static int ball[];
	static int answer;
	static Queue<Point> queue;
	static int[][] dir = {{-1,0},{1,0},{0,1},{0,-1}};
	public static void main(String[] args) throws NullPointerException{
		Scanner scan = new Scanner(System.in);
		int test = scan.nextInt();
		for(int test_case = 1; test_case <= test; test_case++) {
			n = scan.nextInt();
			w = scan.nextInt();
			h = scan.nextInt();
			answer = Integer.MAX_VALUE;
			ball = new int[n];
			arr = new int[h][w];
			ans = new int[h][w];
			for(int i = 0; i < h; i++) {
				for(int j = 0; j < w; j++) {
					arr[i][j] = scan.nextInt();
					ans[i][j] = arr[i][j];
				}
			}
			permutation(0);
			System.out.println("#" + test_case + " " + answer);
		}
	}
	static void permutation(int count) {
		if(count == n) {
			start(ball);
			answer = Math.min(answer, countMap());
			for(int i = 0; i < h; i++)
				for(int j = 0; j < w; j++)
					arr[i][j] = ans[i][j];
			return;
		}
		for(int i = 0; i < w; i++) {
			ball[count] = i;
			permutation(count + 1);
		}
	}
	static void start(int[] balls) {
		int x = 0;
		int y = 0;
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < h; j++) {
				if(arr[j][balls[i]] != 0) {
					x = j;
					y = balls[i];
					break;
				}
			}
			bfs(x,y);
			blockdown();
		}
	}
	static void bfs(int x, int y) {
		queue = new LinkedList<>();
		queue.offer(new Point(x,y,arr[x][y]));
		arr[x][y] = 0;
		while(!queue.isEmpty()) {
			Point now = queue.poll();
			int value = now.cnt;
			for(int i = 1; i < value; i++) {
				for(int j = 0; j < 4; j++) {
					int nx = now.x + dir[j][0] * i;
					int ny = now.y + dir[j][1] * i;
					if(nx < 0 || ny < 0 || nx >= h || ny >= w || arr[nx][ny] == 0)
						continue;
					if(arr[nx][ny] != 0) {
						queue.offer(new Point(nx, ny, arr[nx][ny]));
						arr[nx][ny] = 0;
					}
				}
			}
		}
	}
	static void blockdown() {
		Stack<Integer> stack = new Stack<>();
		for(int i = 0; i < w; i++) {
			for(int j = 0; j < h; j++) {
				if(arr[j][i] != 0)
					stack.add(arr[j][i]);
			}
			for(int j = h - 1; j >= 0; j--) {
				if(stack.isEmpty())
					arr[j][i] = 0;
				else
					arr[j][i] = stack.pop();
			}
		}
	}
	static int countMap() {
		int count = 0;
		for(int i = 0; i < h; i++) {
			for(int j = 0; j < w; j++) {
				if(arr[i][j] != 0)
					count++;
			}
		}
		return count;
	}
}
